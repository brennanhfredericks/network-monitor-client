import configparser
import os
import netifaces
import re
from collections import namedtuple

from ..services import Filter

Config = namedtuple(
    "Configuration",
    [
        "InterfaceName",
        "Log",
        "UnknwownProtocols",
        "FilterAllApplicationTraffic",
        "Local",
        "Url",
        "RetryInterval",
        "Filters",
    ],
)


def load_configuration(config_name: str):

    config = configparser.ConfigParser()

    res = config.read(config_name)

    if len(res) == 0:
        raise ValueError(f"Unsuccessfull at parsing {config_path}")

    # check if interface name is provide and is valid
    ifname = config.get("ListenerService", "InterfaceName", fallback=None)
    if ifname is None:

        raise ValueError(f"InterfaceName is not specified")
    else:
        if ifname not in netifaces.interfaces():
            raise ValueError(f"{ifname} is not a valid interface")

    # application log directory
    log = config.get("Application", "Log", fallback="./logs/application/general")

    # unknown protocols log directory
    unknownprotocols = config.get(
        "Application",
        "UnknownProtocols",
        fallback="./logs/application/unknown_protocols",
    )

    # filter all traffic generated by application
    filterallapplicationtraffic = config.get(
        "Application", "FilterAllApplicationTraffic", fallback=False
    )

    # local directory to store packets when monitor server unavailable
    local = config.get(
        "SubmitterService", "Local", fallback="./logs/submitter_service/"
    )

    # url for monitor server, where packets are submitted
    url = config.get(
        "SubmitterService", "Url", fallback="http://127.0.0.1:5000/packets"
    )

    # timeout for resubmission of logged data
    retryinterval = config.get("SubmitterService", "RetyInterval", fallback=300)

    # retrieve filters
    filters = [re.search("Filter", section) for section in config.sections()]
    collect_filters = []
    for idx, filtr in enumerate(filters):

        if filtr is None:
            continue

        section = config.sections()[idx]

        def_ = config.get(section, "Definition", fallback=None)

        if def_ is not None:
            try:
                def_filter = Filter(section, def_)
            except Exception as e:
                raise ValueError(f"filter not valid {section}: {e}")

            else:
                collect_filters.append(def_filter)

    # default filter? default implimentation should filter all lo packets?
    if not collect_filters:
        ## check for default filter
        if "filter" in config.defaults():

            filtr = config.defaults()["filter"]
            try:
                def_filter = Filter("default", filtr)
            except Exception as e:
                print(f"issue with default filter: {e}")
                sys.exit(1)
            else:
                collect_filters.append(def_filter)

    return Config(
        ifname,
        log,
        unknownprotocols,
        filterallapplicationtraffic,
        local,
        url,
        retryinterval,
        collect_filters,
    )


def generate_configuration_template(config_name: str):

    """ used to generate template configuration for easy setup """

    # create config file
    config = configparser.ConfigParser()

    # template example
    template = """
# Specify interface on which the ethernet listener service should be started.
# Requires super user priviliages to change the interface to operate in promiscous
[ListenerService]
# InterfaceName = "enp0s3"

# Specify application settings. global settings some of which affect other services.
[Application]
# Log = "./logs/application/general/"
# UnknownProtocols = "./logs/application/unknown_protocols"
# FilterAllApplicationTraffic = True

# Specify submitter service setting.
[SubmitterService]
# Local = "./logs/submitter_service/"
# Url = "http://127.0.0.1:5000/packets"
# RetryInterval = 300

# configure filter settings
[Filter]
# Definition = {"AF_Packet":{"ifname":"lo"},"TCP":{}}

# additional config string
[Filter1]
# Definition = {"ICMP":{}}
    """

    # defualt configuration variables use for development
    config["DEFAULT"] = {
        "InterfaceName": "enp0s3",
        "UnknownProtocols": "./logs/application/unknown_protocols",
        "Log": "./logs/application/general",
        "Local": "./logs/submitter_service",
        "Url": "http://127.0.0.1:5000/packets",
        "Filter": {
            "AF_Packet": {"ifname": "lo"},
            "IPv4": {"destination_address": "127.0.0.01"},
            "TCP": {"destination_port": 5000},
        },
    }

    with open(os.path.join("./", f"{config_name}"), "w") as fout:
        config.write(fout)

        fout.write(template)
