import netifaces
import re
import os

from .config import BaseConfig
from ..services import Filter
from configparser import ConfigParser
from typing import Optional


def load_config_from_file(configuration_path: str) -> BaseConfig:
    app_config: BaseConfig = BaseConfig()
    config: ConfigParser = ConfigParser()

    # populate data from file
    loaded_config: ConfigParser = config.read(configuration_path)

    if len(loaded_config) == 0:
        raise ValueError(f"Unsuccessfull at parsing {configuration_path}")

    # check if interface name is provide and is valid
    interfacename: str = config.get("ListenerService", "InterfaceName")
    if interfacename is not None:
        if interfacename not in netifaces.interfaces():
            raise ValueError(f"{interfacename} is not a valid interface")
        app_config.InterfaceName = interfacename

    # filter all traffic generated by application
    filtersubmissiontraffic: bool = config.get(
        "Application", "FilterSubmissionTraffic"
    )

    app_config.FilterSubmissionTraffic = bool(filtersubmissiontraffic)

    # url for monitor server, where packets are submitted
    url: str = config.get(
        "SubmitterService", "Url",
    )
    app_config.RemoteMetadataStorage: str = url

    # timeout for resubmission of logged data
    retryinterval: int = config.get(
        "SubmitterService", "RetryInterval")
    app_config.ResubmissionInterval = int(retryinterval)

    # retrieve filters use regex
    filters = [re.search("Filter", section) for section in config.sections()]

    for idx, filtr in enumerate(filters):

        if filtr is None:
            continue

        section: str = config.sections()[idx]

        def_: Optional[str] = config.get(
            section, "Definition", fallback=None)

        if def_ is not None:
            try:
                def_filter: Filter = Filter(section, def_)
            except Exception as e:
                raise ValueError(f"filter not valid {section}: {e}")

            else:
                app_config.Filters.append(def_filter)

    return app_config


def generate_configuration_template(config_name: str):
    """ used to generate template configuration for easy setup """

    # create config file
    config = ConfigParser()

    # template example
    template = """
# Specify interface on which the ethernet listener service should be started.
# Requires super user priviliages to change the interface to operate in promiscous
[ListenerService]
# InterfaceName = enp0s3

# Specify application settings. global settings some of which affect other services.
[Application]
# FilterSubmissionTraffic = True

# Specify submitter service setting.
[SubmitterService]
# Url = http://127.0.0.1:5000/packets
# RetryInterval = 300

# configure filter settings
[Filter]
# Definition = {"AF_Packet":{"ifname":"lo"},"TCP":{}}

# additional config string
[Filter1]
# Definition ={"Filter": {"AF_Packet": {"ifname": "lo"},"IPv4": {"destination_address": "127.0.0.01"},"TCP": {"destination_port": 5000}}
    """

    with open(os.path.join("./", f"{config_name}"), "w") as fout:
        config.write(fout)

        fout.write(template)
